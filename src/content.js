console.log("üìå content.js –∑–∞–≥—Ä—É–∂–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...");

let audioContext;
let mediaRecorder;
let audioChunks = [];

async function getAudioStream() {
    console.log("üéß –ü–µ—Ä–µ—Ö–≤–∞—Ç –∞—É–¥–∏–æ: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø...");

    try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        console.log("‚úÖ –ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω:", stream);

        return stream;
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞:", err);
    }
}

async function startRecording() {
    console.log("üéô –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏...");

    if (!audioContext) {
        audioContext = new AudioContext();
    }

    if (audioContext.state === "suspended") {
        await audioContext.resume();
        console.log("üîä AudioContext –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω!");
    }

    const stream = await getAudioStream();
    if (!stream) return;

    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
            audioChunks.push(event.data);
        }
    };

    mediaRecorder.start();
    console.log("‚ñ∂ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å! –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:", mediaRecorder.state);
}

// üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
async function stopRecording() {
    console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...");

    if (mediaRecorder && mediaRecorder.state !== "inactive") {
        mediaRecorder.stop();
        console.log("‚èπ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
        
        // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        mediaRecorder.onstop = async () => {
            const audioBlob = new Blob(audioChunks, { type: "audio/wav" });
            console.log("üíæ –ê—É–¥–∏–æ-—Ñ–∞–π–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:", audioBlob);

            await saveFile(audioBlob);
        };
    }
}

// üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ FileSystem API
async function saveFile(blob) {
    const fileHandle = await window.showSaveFilePicker({
        suggestedName: "recording.wav",
        types: [{ description: "Audio File", accept: { "audio/wav": [".wav"] } }]
    });

    const writableStream = await fileHandle.createWritable();
    await writableStream.write(blob);
    await writableStream.close();

    console.log("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: recording.wav");
}

// üì© –°–ª—É—à–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç popup.js
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.action === "startRecording") {
        console.log("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ 'startRecording', –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å...");
        startRecording();
        sendResponse({ status: "‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å!" });
    }
    if (message.action === "stopRecording") {
        console.log("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ 'stopRecording', –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å...");
        stopRecording();
        sendResponse({ status: "‚úÖ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!" });
    }
    return true;
});
