// const OPENAI_API_KEY = "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"; // üîë –í—Å—Ç–∞–≤—å —Å–≤–æ–π API-–∫–ª—é—á OpenAI


chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === "sendAudioToWhisper") {
        (async () => {
            try {
                console.log("üì© –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º...");

                const byteCharacters = atob(message.file.split(',')[1]); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const audioBlob = new Blob([byteArray], { type: "audio/wav" });

                console.log("üîÑ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω!");

                const OPENAI_API_URL = "https://api.openai.com/v1/audio/transcriptions";
                
                const OPENAI_API_KEY = "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"; // üîë –í—Å—Ç–∞–≤—å API-–∫–ª—é—á OpenAI

                const formData = new FormData();
                formData.append("file", audioBlob, "recording.wav");
                formData.append("model", "whisper-1");
                formData.append("language", "ru"); // –£–∫–∞–∂–∏ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫

                console.log("üåç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤:", OPENAI_API_URL);

                const response = await fetch(OPENAI_API_URL, {
                    method: "POST",
                    headers: {
                        Authorization: `Bearer ${OPENAI_API_KEY}`,
                    },
                    body: formData,
                });

                const result = await response.json();
                console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç Whisper:", result);

                if (response.ok) {
                    saveTranscriptionToFile(result.text);
                    sendResponse({ status: "‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω", transcription: result.text });
                } else {
                    console.error("‚ö† –û—à–∏–±–∫–∞ –æ—Ç OpenAI:", result);
                    sendResponse({ status: "‚ùå –û—à–∏–±–∫–∞ OpenAI", error: result });
                }
            } catch (error) {
                console.error("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Whisper:", error);
                sendResponse({ status: "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", error: error.message });
            }
        })();

        return true; // üöÄ –í–ê–ñ–ù–û: Chrome –±—É–¥–µ—Ç –∂–¥–∞—Ç—å sendResponse
    }
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ .txt
function saveTranscriptionToFile(transcription) {
    const blob = new Blob([transcription], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "transcription.txt";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}
