// Background script for Google Meet Transcription Plugin

// Constants
const DEFAULT_LANGUAGE = "ru";
const WHISPER_MODEL = "whisper-1";
const DEFAULT_API_URL = "https://api.openai.com/v1/audio/transcriptions";

// Initialize plugin settings
chrome.runtime.onInstalled.addListener(() => {
    chrome.storage.local.get(['apiKey', 'enableNotifications', 'defaultLanguage'], (result) => {
        if (!result.apiKey) {
            chrome.storage.local.set({
                apiKey: "", // Empty by default, to be set by user
                enableNotifications: true,
                defaultLanguage: DEFAULT_LANGUAGE
            });
            // Open options page when first installed
            chrome.runtime.openOptionsPage();
        }
    });
});

// Listen for messages from content script
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === "sendAudioToWhisper") {
        (async () => {
            try {
                console.log("üì© –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º...");
                showNotification("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", "–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏...");

                // Get API key and settings from storage
                const storage = await chrome.storage.local.get(['apiKey', 'defaultLanguage', 'apiUrl']);
                let apiKey = storage.apiKey;
                const language = storage.defaultLanguage || DEFAULT_LANGUAGE;
                // Use custom API URL if set, otherwise use default
                const apiUrl = storage.apiUrl || DEFAULT_API_URL;

                if (!apiKey) {
                    const error = "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.";
                    console.error("‚ö† " + error);
                    showNotification("–û—à–∏–±–∫–∞ API", error);
                    sendResponse({ status: "‚ùå –û—à–∏–±–∫–∞ API", error });
                    return;
                }

                // Decode Base64 audio data
                const byteCharacters = atob(message.file.split(',')[1]);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const audioBlob = new Blob([byteArray], { type: "audio/wav" });

                console.log("üîÑ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω!");

                // Create form data for API request
                const formData = new FormData();
                formData.append("file", audioBlob, "recording.wav");
                formData.append("model", WHISPER_MODEL);
                formData.append("language", language);

                // Determine the authentication method based on key format
                const isProjectKey = apiKey.startsWith("sk-proj-");
                const authHeader = {};
                
                if (isProjectKey) {
                    // Try alternative authentication methods for project keys
                    authHeader.Authorization = `Bearer ${apiKey}`;
                    // Add fallback authentication methods
                    authHeader["X-API-Key"] = apiKey;
                } else {
                    // Standard OpenAI authentication
                    authHeader.Authorization = `Bearer ${apiKey}`;
                }
                
                console.log(`üåç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤: ${apiUrl}`);
                console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∏–ø –∫–ª—é—á–∞: ${isProjectKey ? "–ü—Ä–æ–µ–∫—Ç–Ω—ã–π –∫–ª—é—á" : "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á"}`);
                showNotification("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");

                // Send request to API
                const response = await fetch(apiUrl, {
                    method: "POST",
                    headers: authHeader,
                    body: formData,
                });

                const result = await response.json();

                if (response.ok) {
                    console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç Whisper –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                    
                    // Generate filename based on meeting name and date
                    const filename = generateFilename(message.meetingName);
                    
                    // Save transcription to file
                    saveTranscriptionToFile(result.text, filename);
                    
                    showNotification("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ " + filename);
                    sendResponse({ status: "‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω", transcription: result.text });
                } else {
                    console.error("‚ö† –û—à–∏–±–∫–∞ –æ—Ç OpenAI:", result);
                    showNotification("–û—à–∏–±–∫–∞ OpenAI", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª");
                    sendResponse({ status: "‚ùå –û—à–∏–±–∫–∞ OpenAI", error: result });
                }
            } catch (error) {
                console.error("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Whisper:", error);
                showNotification("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
                sendResponse({ status: "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", error: error.message });
            }
        })();

        return true; // –í–∞–∂–Ω–æ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ sendResponse
    }
});

// Generate filename for transcription
function generateFilename(meetingName) {
    const date = new Date();
    const formattedDate = date.toISOString().slice(0, 10); // YYYY-MM-DD
    const formattedTime = date.toTimeString().slice(0, 8).replace(/:/g, "-"); // HH-MM-SS
    
    // Clean meeting name or use default
    const cleanName = meetingName 
        ? meetingName.replace(/[^\w\s-]/g, "").substring(0, 30).trim() 
        : "–≤—Å—Ç—Ä–µ—á–∞";
        
    return `transcription_${cleanName}_${formattedDate}_${formattedTime}.txt`;
}

// Save transcription to file using download method
async function saveTranscriptionToFile(transcription, filename) {
    try {
        // Create a blob from the transcription text
        const blob = new Blob([transcription], { type: "text/plain" });
        
        // Standard download method that works in background script
        console.log("üíæ –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è");
        
        // Use chrome.downloads API for reliable file saving from background
        const url = URL.createObjectURL(blob);
        
        chrome.downloads.download({
            url: url,
            filename: filename,
            saveAs: false
        }, (downloadId) => {
            if (chrome.runtime.lastError) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:", chrome.runtime.lastError.message);
            } else {
                console.log(`‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞—á–∞—Ç–æ, ID: ${downloadId}`);
            }
            // Revoke URL after download starts
            URL.revokeObjectURL(url);
        });
        
        console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${filename}`);
        return true;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
        
        // Attempt fallback method if the download API fails
        try {
            const blob = new Blob([transcription], { type: "text/plain" });
            const url = URL.createObjectURL(blob);
            
            // Create a new tab with the text content
            chrome.tabs.create({ url: url }, (tab) => {
                console.log("üìÑ –û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π —Ç–∞–± —Å —Ç–µ–∫—Å—Ç–æ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é.");
                
                // Add a listener to close the tab when download is complete
                chrome.tabs.onUpdated.addListener(function listener(tabId, info) {
                    if (tabId === tab.id && info.status === 'complete') {
                        chrome.tabs.onUpdated.removeListener(listener);
                        
                        // Execute content script to add download button
                        chrome.scripting.executeScript({
                            target: { tabId: tab.id },
                            function: (filename) => {
                                const downloadBtn = document.createElement('button');
                                downloadBtn.textContent = '–°–∫–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é';
                                downloadBtn.style.position = 'fixed';
                                downloadBtn.style.top = '10px';
                                downloadBtn.style.left = '10px';
                                downloadBtn.style.zIndex = '9999';
                                downloadBtn.style.padding = '10px';
                                downloadBtn.style.backgroundColor = '#1a73e8';
                                downloadBtn.style.color = 'white';
                                downloadBtn.style.border = 'none';
                                downloadBtn.style.borderRadius = '4px';
                                downloadBtn.style.cursor = 'pointer';
                                
                                downloadBtn.onclick = () => {
                                    const a = document.createElement('a');
                                    a.href = window.location.href;
                                    a.download = filename;
                                    a.click();
                                };
                                
                                document.body.prepend(downloadBtn);
                            },
                            args: [filename]
                        });
                    }
                });
            });
            
            return true;
        } catch (fallbackError) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞:", fallbackError);
            return false;
        }
    }
}

// Show notification
function showNotification(title, message) {
    chrome.storage.local.get(['enableNotifications'], (result) => {
        if (result.enableNotifications) {
            chrome.notifications.create({
                type: "basic",
                iconUrl: "../images/icon128.png",
                title: title,
                message: message
            });
        }
    });
}